{"name": "test_main[case_data1]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "case_data = {'assert_response_value': [{'assert_type': 'equals_assert', 'expected': 1, 'expr': '$.status'}], 'case_title': '用户登录成1...: 'chenzanxu', 'secret': '', 'type': 'random_number(10)'}, 'extract_key': {'access_token': '$.data.access_token'}, ...}\n\n    @pytest.mark.parametrize(\"case_data\",ReadFile.read_case())\n    def test_main(case_data):\n    \n>       case_execute(case_data)\n\ntestcases\\test_case.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ncase_run\\run.py:16: in case_execute\n    RespondAssert().assert_response_value(replace_case_data[\"assert_response_value\"],response_data,case_data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.assertUtil.RespondAssert object at 0x000001FB5FC76FA0>\ncheck_list = [{'assert_type': 'equals_assert', 'expected': 1, 'expr': '$.status'}], response_data = <Response [400]>\ncase_data = {'assert_response_value': [{'assert_type': 'equals_assert', 'expected': 1, 'expr': '$.status'}], 'case_title': '用户登录成1...: 'chenzanxu', 'secret': '', 'type': 'random_number(10)'}, 'extract_key': {'access_token': '$.data.access_token'}, ...}\n\n    def assert_response_value(self,check_list, response_data,case_data):\n        \"\"\"\n        :param check_list: 从yaml当中，读取出来的断言列。\n        :param response_data: 接口请求之后的响应数据，是字典类型。\n        :case_data  用例数据\n        :return: None\n        \"\"\"\n        # 所有断言的比对结果列表\n        check_res = []\n    \n        for check in check_list:\n    \n            # 通过jsonpath表达式，从响应结果当中拿到了实际结果\n            actual = jsonpath.jsonpath(response_data.json(), check[\"expr\"])\n            if isinstance(actual, list):\n                actual = actual[0]\n            # 与实际结果做比对\n            if check[\"assert_type\"] == \"equals_assert\":\n                logger.info(\"比对2个值是否相等。\")\n                logger.info(\"比对结果为：{}\".format(actual == check[\"expected\"]))\n                check_res.append(actual == check[\"expected\"])\n            #包含断言\n            elif check[\"assert_type\"] == \"contains_assert\":\n                logger.info(\"比对2个值的大小。\")\n                logger.info(\"比对结果为：{}\".format(actual > check[\"expected\"]))\n            #结果断言\n            elif check[\"assert_type\"] == \"assert_result\":\n                logger.info(\"比对2个值是否相等。\")\n                logger.info(\"比对结果为：{}\".format(actual == check[\"expected\"]))\n                check_res.append(actual == check[\"expected\"])\n    \n        if False in check_res:\n            logger.error(\"断言失败！\")\n            logger.info(\"断言结果列表:{}\".format(check_res))\n            FAILED_CASE = []\n            FAILED_CASE.append(case_data['case_title'])\n            FAILED_CASE.append(response_data.status_code)\n            FAILED_CASE.append(response_data.json())\n            FAILED_CASE_LIST.append(FAILED_CASE)\n            FAILED_CASE = []\n>           raise AssertionError\nE           AssertionError\n\nutils\\assertUtil.py:56: AssertionError"}, "parameters": [{"name": "case_data", "value": "{'url': 'api/v1/pub/login/3rd', 'method': 'POST', 'remark': 'random_number(10)', 'is_run': True, 'data': {'ID': 'chenzanxu', 'secret': '', 'type': 'random_number(10)'}, 'extract_key': {'access_token': '$.data.access_token'}, 'assert_response_value': [{'expr': '$.status', 'expected': 1, 'assert_type': 'equals_assert'}], 'case_title': '用户登录成1'}"}], "start": 1683799552924, "stop": 1683799552974, "uuid": "a9522e18-6fe5-4bb8-b629-d93ac2fc401d", "historyId": "04ecadce693dcab81d4a207e475ff118", "testCaseId": "f2c9a2bd320c73dfb73708221865066f", "fullName": "testcases.test_case#test_main", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_case"}, {"name": "host", "value": "DESKTOP-5KLQQEQ"}, {"name": "thread", "value": "4480-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_case"}]}